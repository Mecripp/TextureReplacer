// DO NOT MODIFY this file, it may be overriden on upgrade. Its only purpuse is
// to document available options and set their default values.
//
// If you want to change any of the following options create a new file (e.g.
// `My.cfg`) in this directory that has the same structure and put the options
// you want to change there.
//
// IF YOU ARE A MODDER do not distribute this file with your mod. Create a new
// file `MyMod.cfg` in this direcotry that has the same structure but only
// containing options you are overriding. Do not put it in other directories as
// it might get processed earlier than this file so your settings will get
// overriden with these defaults.

TextureReplacer
{
  // Skinning quality for animated meshes. It defines how many bones should be
  // when interpolating vertices of animated meshes.
  // `auto`  - default (no change).
  // `bone1` - do not interpolate (each vertex is only tied to a single bone).
  // `bone2` - interpolate vertices between 2 bones at most.
  // `bone4` - interpolate vertices among 4 bones at most.
  skinningQuality = auto

  // Dump material/texture name pairs to log when performing general texture
  // replacement pass. Log entries are of the form
  //
  //   [<materialName>] <textureName>
  //
  // This option is intended for texture pack designers.
  logTextures = false

  // Dump full hierarchy (nodes, meshes, textures ...) of Kerbals.
  // This option is intended for mod developers.
  logKerbalHierarchy = false

  // Dump names of all meshes with corresponding shaders on parts with
  // TRReflection part module.
  // This option is intended for part designers.
  logReflectiveMeshes = false

  // Enable toolbar icon that activates GUI for customising Kerbals.
  isGUIEnabled = true

  // Reflection type. Possible options are `none` and `real`.
  // This is only initial setting for new games! Use the GUI to change it later.
  reflectionType = real

  // Resolution of cube texture faces that is used for real reflections.
  reflectionResolution = 256

  // One face of one environment map is updated once in `reflectionInterval`
  // rendered frames.
  reflectionInterval = 2

  // Replace helmet visor shader to support reflections (EVA only).
  isVisorReflectionEnabled = true

  // Reflection colour. Reflection is multiplied by this RGB colour before it is
  // added to the visor colour.
  visorReflectionColour = 1.0 1.0 1.0

  CustomKerbals
  {
    // Custom skins and suits for specific Kerbals. Entries are of the form:
    //
    //   name = skinTex [suitDir]
    //
    // `skinTex` is an image (without extension) inside `Skins/` and `suitDir`
    // is a subdirectory inside `Suits/` containing textures for a suit.
    // `DEFAULT` keeps the default skin/suit textures from `Default/` and
    // `GENERIC` assigns a generic skin/suit using the same rules as for the
    // generic Kerbals. If `suitDir` is missing then `GENERIC` is assumed.
    //
    // Examples:
    //
    //   Huey Kerman    = skin1 suit1
    //   Dewey Kerman   = skin2 DEFAULT
    //   Louie Kerman   = skin3
    //   Donald Kerman  = DEFAULT DEFAULT
    //   Daisy Kerman   = DEFAULT
    //   Scrooge Kerman = GENERIC suit2
    //
    // THESE SETTINGS ARE OVERRIDDEN BY PER-GAME SETTINGS SET IN THE GUI!
    //
  }

  GenericKerbals
  {
    // Prevent the following skins from being assigned to generic Kerbals.
    // The list must be space- and/or comma-separated and in one line.
    // Duplicated lists are joined.
    excludedSkins =

    // Prevent the following suits from being assigned to generic Kerbals.
    // The list must be space- and/or comma-separated and in one line.
    // Duplicated lists are joined.
    excludedSuits =

    // Female suits. Directory names inside `Suits/`.
    // The list must be space- and/or comma-separated and in one line.
    // Duplicated lists are joined.
    femaleSuits =

    // Eye-less skins. Eyes will be hidden for those skins, so one can paint
    // custom ones on the head texture.
    // The list must be space- and/or comma-separated and in one line.
    // Duplicated lists are joined.
    eyelessSkins =
  }

  ClassSuits
  {
    // Class-specific suits.
    //
    //   className = suitDir
    //
    // where `className` is `Pilot`, `Engineer` or `Scientist` and `suitDir` is
    // a suit directory from `Suits/`, `DEFAULT` or `GENERIC`.
    // Custom experience traits are supported too. `className` must match `name`
    // property in a `EXPERIENCE_TRAIT` configuration.
    //
    // Examples:
    //
    //   Pilot     = Suit1
    //   Engineer  = DEFAULT
    //   Scientist = GENERIC
    //
    // THESE SETTINGS ARE OVERRIDDEN BY PER-GAME SETTINGS SET IN THE GUI!
    //
  }
}
